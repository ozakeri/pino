package com.gap.bis_inspection.db.objectmodel;

import com.gap.bis_inspection.db.dao.ChatGroupDao;
import com.gap.bis_inspection.db.dao.ChatGroupMemberDao;
import com.gap.bis_inspection.db.dao.ChatMessageDao;
import com.gap.bis_inspection.db.dao.DaoSession;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "CHAT_GROUP".
 */
public class ChatGroup {

    private Long id;
    private Long serverGroupId;
    private String name;
    private Integer maxMember;
    private Boolean notifyAct;
    private Integer statusEn;
    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ChatGroupDao myDao;
    private List<ChatGroupMember> chatGroupMemberList;
    private List<ChatMessage> chatMessageList;
    private transient ChatMessage lastChatMessage;
    private transient Integer countOfUnreadMessage;
    private transient List<Long> notServerGroupIdList;
    private transient Integer countOfMembers;

    public ChatGroup() {
    }

    public ChatGroup(Long id) {
        this.id = id;
    }

    public ChatGroup(Long id, Long serverGroupId, String name, Integer maxMember, Boolean notifyAct, Integer statusEn) {
        this.id = id;
        this.serverGroupId = serverGroupId;
        this.name = name;
        this.maxMember = maxMember;
        this.notifyAct = notifyAct;
        this.statusEn = statusEn;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getChatGroupDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getServerGroupId() {
        return serverGroupId;
    }

    public void setServerGroupId(Long serverGroupId) {
        this.serverGroupId = serverGroupId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Integer getMaxMember() {
        return maxMember;
    }

    public void setMaxMember(Integer maxMember) {
        this.maxMember = maxMember;
    }

    public Boolean getNotifyAct() {
        return notifyAct;
    }

    public void setNotifyAct(Boolean notifyAct) {
        this.notifyAct = notifyAct;
    }

    public Integer getStatusEn() {
        return statusEn;
    }

    public void setStatusEn(Integer statusEn) {
        this.statusEn = statusEn;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ChatGroupMember> getChatGroupMemberList() {
        if (chatGroupMemberList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ChatGroupMemberDao targetDao = daoSession.getChatGroupMemberDao();
            List<ChatGroupMember> chatGroupMemberListNew = targetDao._queryChatGroup_ChatGroupMemberList(id);
            synchronized (this) {
                if(chatGroupMemberList == null) {
                    chatGroupMemberList = chatGroupMemberListNew;
                }
            }
        }
        return chatGroupMemberList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetChatGroupMemberList() {
        chatGroupMemberList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ChatMessage> getChatMessageList() {
        if (chatMessageList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ChatMessageDao targetDao = daoSession.getChatMessageDao();
            List<ChatMessage> chatMessageListNew = targetDao._queryChatGroup_ChatMessageList(id);
            synchronized (this) {
                if(chatMessageList == null) {
                    chatMessageList = chatMessageListNew;
                }
            }
        }
        return chatMessageList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetChatMessageList() {
        chatMessageList = null;
    }

    /** Convenient call for {@link de.greenrobot.dao.AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link de.greenrobot.dao.AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link de.greenrobot.dao.AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    public ChatMessage getLastChatMessage() {
        return lastChatMessage;
    }

    public void setLastChatMessage(ChatMessage lastChatMessage) {
        this.lastChatMessage = lastChatMessage;
    }

    public Integer getCountOfUnreadMessage() {
        return countOfUnreadMessage;
    }

    public void setCountOfUnreadMessage(Integer countOfUnreadMessage) {
        this.countOfUnreadMessage = countOfUnreadMessage;
    }

    public List<Long> getNotServerGroupIdList() {
        return notServerGroupIdList;
    }

    public void setNotServerGroupIdList(List<Long> notServerGroupIdList) {
        this.notServerGroupIdList = notServerGroupIdList;
    }

    public Integer getCountOfMembers() {
        return countOfMembers;
    }

    public void setCountOfMembers(Integer countOfMembers) {
        this.countOfMembers = countOfMembers;
    }
}
