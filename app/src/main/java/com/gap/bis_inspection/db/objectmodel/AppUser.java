package com.gap.bis_inspection.db.objectmodel;

import java.util.List;

import com.gap.bis_inspection.db.dao.AppUserDao;
import com.gap.bis_inspection.db.dao.ChatGroupMemberDao;
import com.gap.bis_inspection.db.dao.ChatMessageDao;
import com.gap.bis_inspection.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "APP_USER".
 */
public class AppUser {

    private Long id;
    private String name;
    private String family;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AppUserDao myDao;

    private List<ChatGroupMember> chatGroupList;
    private List<ChatMessage> sendChatMessageList;
    private List<ChatMessage> receiveChatMessageList;

    public AppUser() {
    }

    public AppUser(Long id) {
        this.id = id;
    }

    public AppUser(Long id, String name, String family) {
        this.id = id;
        this.name = name;
        this.family = family;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAppUserDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getFamily() {
        return family;
    }

    public void setFamily(String family) {
        this.family = family;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ChatGroupMember> getChatGroupList() {
        if (chatGroupList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ChatGroupMemberDao targetDao = daoSession.getChatGroupMemberDao();
            List<ChatGroupMember> chatGroupListNew = targetDao._queryAppUser_ChatGroupList(id);
            synchronized (this) {
                if(chatGroupList == null) {
                    chatGroupList = chatGroupListNew;
                }
            }
        }
        return chatGroupList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetChatGroupList() {
        chatGroupList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ChatMessage> getSendChatMessageList() {
        if (sendChatMessageList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ChatMessageDao targetDao = daoSession.getChatMessageDao();
            List<ChatMessage> sendChatMessageListNew = targetDao._queryAppUser_SendChatMessageList(id);
            synchronized (this) {
                if(sendChatMessageList == null) {
                    sendChatMessageList = sendChatMessageListNew;
                }
            }
        }
        return sendChatMessageList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetSendChatMessageList() {
        sendChatMessageList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ChatMessage> getReceiveChatMessageList() {
        if (receiveChatMessageList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ChatMessageDao targetDao = daoSession.getChatMessageDao();
            List<ChatMessage> receiveChatMessageListNew = targetDao._queryAppUser_ReceiveChatMessageList(id);
            synchronized (this) {
                if(receiveChatMessageList == null) {
                    receiveChatMessageList = receiveChatMessageListNew;
                }
            }
        }
        return receiveChatMessageList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetReceiveChatMessageList() {
        receiveChatMessageList = null;
    }

    /** Convenient call for {@link de.greenrobot.dao.AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link de.greenrobot.dao.AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link de.greenrobot.dao.AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
