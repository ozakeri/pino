package com.gap.bis_inspection.db.dao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import com.gap.bis_inspection.db.objectmodel.FormQuestion;
import com.gap.bis_inspection.db.objectmodel.FormQuestionGroup;
import com.gap.bis_inspection.db.objectmodel.FormQuestionGroupForm;
import com.gap.bis_inspection.db.objectmodel.SurveyFormQuestionTemp;

import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * Master of DAO (schema version 1): knows all DAOs.
 */
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 13;

    /**
     * Creates underlying database table using DAOs.
     */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        DeviceSettingDao.createTable(db, ifNotExists);
        UserDao.createTable(db, ifNotExists);
        UserPermissionDao.createTable(db, ifNotExists);
        AppUserDao.createTable(db, ifNotExists);
        ChatGroupDao.createTable(db, ifNotExists);
        ChatGroupMemberDao.createTable(db, ifNotExists);
        ChatMessageDao.createTable(db, ifNotExists);
        ComplaintReportDao.createTable(db, ifNotExists);
        SurveyFormDao.createTable(db, ifNotExists);
        SurveyFormQuestionDao.createTable(db, ifNotExists);
        FormAnswerDao.createTable(db, ifNotExists);
        FormDao.createTable(db, ifNotExists);
        FormItemAnswerDao.createTable(db, ifNotExists);
        FormQuestionDao.createTable(db, ifNotExists);
        AttachFileDao.createTable(db, ifNotExists);
        FormQuestionGroupDao.createTable(db, ifNotExists);
        FormTempDao.createTable(db, ifNotExists);
        FormQuestionGroupFormDao.createTable(db, ifNotExists);
        SurveyFormQuestionTempDao.createTable(db, ifNotExists);
    }

    public static void createNonBaseTables1(SQLiteDatabase db, boolean ifNotExists) {
        DeviceSettingDao.createTable(db, ifNotExists);
        AppUserDao.createTable(db, ifNotExists);
        ChatGroupDao.createTable(db, ifNotExists);
        ChatGroupMemberDao.createTable(db, ifNotExists);
        ChatMessageDao.createTable(db, ifNotExists);
        ComplaintReportDao.createTable(db, ifNotExists);
        SurveyFormDao.createTable(db, ifNotExists);
        SurveyFormQuestionDao.createTable(db, ifNotExists);
        FormAnswerDao.createTable(db, ifNotExists);
        FormDao.createTable(db, ifNotExists);
        FormItemAnswerDao.createTable(db, ifNotExists);
        FormQuestionDao.createTable(db, ifNotExists);
        AttachFileDao.createTable(db, ifNotExists);
        FormQuestionGroupDao.createTable(db, ifNotExists);
        FormTempDao.dropTable(db, ifNotExists);
        FormQuestionGroupFormDao.dropTable(db, ifNotExists);
        SurveyFormQuestionTempDao.dropTable(db, ifNotExists);
    }

    public static void createNonBaseTables2(SQLiteDatabase db, boolean ifNotExists) {
        AppUserDao.createTable(db, ifNotExists);
        ChatGroupDao.createTable(db, ifNotExists);
        ChatGroupMemberDao.createTable(db, ifNotExists);
        ChatMessageDao.createTable(db, ifNotExists);
        ComplaintReportDao.createTable(db, ifNotExists);
        SurveyFormDao.createTable(db, ifNotExists);
        SurveyFormQuestionDao.createTable(db, ifNotExists);
        FormAnswerDao.createTable(db, ifNotExists);
        FormDao.createTable(db, ifNotExists);
        FormItemAnswerDao.createTable(db, ifNotExists);
        FormQuestionDao.createTable(db, ifNotExists);
        SurveyFormQuestionTempDao.createTable(db, ifNotExists);
    }

    /**
     * Drops underlying database table using DAOs.
     */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        DeviceSettingDao.dropTable(db, ifExists);
        UserDao.dropTable(db, ifExists);
        UserPermissionDao.dropTable(db, ifExists);
        AppUserDao.dropTable(db, ifExists);
        ChatGroupDao.dropTable(db, ifExists);
        ChatGroupMemberDao.dropTable(db, ifExists);
        ChatMessageDao.dropTable(db, ifExists);
        ComplaintReportDao.dropTable(db, ifExists);
        SurveyFormDao.dropTable(db, ifExists);
        SurveyFormQuestionDao.dropTable(db, ifExists);
        FormAnswerDao.dropTable(db, ifExists);
        FormDao.dropTable(db, ifExists);
        FormItemAnswerDao.dropTable(db, ifExists);
        FormQuestionDao.dropTable(db, ifExists);
        AttachFileDao.dropTable(db, ifExists);
        FormQuestionGroupDao.dropTable(db, ifExists);
        FormQuestionGroupFormDao.dropTable(db, ifExists);
        SurveyFormQuestionTempDao.dropTable(db, ifExists);
    }

    /**
     * Drops underlying database table using DAOs.
     */
    public static void dropNonBaseTables1(SQLiteDatabase db, boolean ifExists) {
        DeviceSettingDao.dropTable(db, ifExists);
        AppUserDao.dropTable(db, ifExists);
        ChatGroupDao.dropTable(db, ifExists);
        ChatGroupMemberDao.dropTable(db, ifExists);
        ChatMessageDao.dropTable(db, ifExists);
        ComplaintReportDao.dropTable(db, ifExists);
        SurveyFormDao.dropTable(db, ifExists);
        SurveyFormQuestionDao.dropTable(db, ifExists);
        FormAnswerDao.dropTable(db, ifExists);
        FormDao.dropTable(db, ifExists);
        FormItemAnswerDao.dropTable(db, ifExists);
        FormQuestionDao.dropTable(db, ifExists);
        AttachFileDao.dropTable(db, ifExists);
        FormQuestionGroupDao.dropTable(db, ifExists);
        FormQuestionDao.createTable(db, ifExists);
        FormQuestionGroupFormDao.createTable(db, ifExists);
        SurveyFormQuestionTempDao.createTable(db, ifExists);
    }

    public static void dropNonBaseTables2(SQLiteDatabase db, boolean ifExists) {
        AppUserDao.dropTable(db, ifExists);
        ChatGroupDao.dropTable(db, ifExists);
        ChatGroupMemberDao.dropTable(db, ifExists);
        ChatMessageDao.dropTable(db, ifExists);
        ComplaintReportDao.dropTable(db, ifExists);
        SurveyFormDao.dropTable(db, ifExists);
        SurveyFormQuestionDao.dropTable(db, ifExists);
        FormAnswerDao.dropTable(db, ifExists);
        FormDao.dropTable(db, ifExists);
        FormItemAnswerDao.dropTable(db, ifExists);
        FormQuestionDao.dropTable(db, ifExists);
        SurveyFormQuestionTempDao.dropTable(db, ifExists);
    }

    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }

        @Override
        public SQLiteDatabase getWritableDatabase() {
            return super.getWritableDatabase();
        }

        @Override
        public SQLiteDatabase getReadableDatabase() {
            return super.getReadableDatabase();
        }

        @Override
        public void onDowngrade(SQLiteDatabase db, int oldVersion, int newVersion) {

        }
    }

    /**
     * WARNING: Drops all table on Upgrade! Use only during development.
     */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            System.out.println("----------DevOpenHelper.onUpgrade");
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            for (int migrateVersion = oldVersion + 1; migrateVersion <= newVersion; migrateVersion++) {
                upgrade(db, migrateVersion);
            }
            /*dropAllTables(db, true);
            onCreate(db);*/
/*
            if(oldVersion == 3 && newVersion == 4){
                db.execSQL("ALTER TABLE 'USER' ADD 'NEW_COLUMN' INTEGER");
                ComplaintReportDao.dropTable(db, true);
            }else{
            }
*/
        }

        private void upgrade(SQLiteDatabase db, int migrateVersion) {
            switch (migrateVersion) {
                case 2:
                    dropNonBaseTables1(db, true);
                    createNonBaseTables1(db, false);
                    break;
                case 3:
                    ChatGroupDao.dropTable(db, true);
                    ChatGroupMemberDao.dropTable(db, true);
                    ChatGroupDao.createTable(db, false);
                    ChatGroupMemberDao.createTable(db, false);
                    break;
                case 4:
                    ComplaintReportDao.dropTable(db, true);
                    ComplaintReportDao.createTable(db, false);
                    break;
                case 5:
                    ChatMessageDao.dropTable(db, true);
                    ChatMessageDao.createTable(db, false);
                    break;
                case 6:
                    SurveyFormDao.createTable(db, false);
                    SurveyFormQuestionDao.createTable(db, false);
                    break;
                case 7:
                    db.execSQL("ALTER TABLE 'CHAT_MESSAGE' ADD 'ATTACH_FILE_SIZE' INTEGER");
                    db.execSQL("ALTER TABLE 'CHAT_MESSAGE' ADD 'ATTACH_FILE_SENT_SIZE' INTEGER");
                    db.execSQL("ALTER TABLE 'CHAT_MESSAGE' ADD 'ATTACH_FILE_RECEIVED_SIZE' INTEGER");
                    break;
                case 8:
                    db.execSQL("ALTER TABLE 'COMPLAINT_REPORT' ADD 'IDENTIFIER' TEXT");
                    break;
                case 9:
                    FormDao.createTable(db, false);
                    FormAnswerDao.createTable(db, false);
                    FormQuestionDao.createTable(db, false);
                    FormItemAnswerDao.createTable(db, false);
                    break;
                case 10:
                    db.execSQL("ALTER TABLE 'USER' ADD 'AUTO_LOGIN' INTEGER DEFAULT 0");
                    db.execSQL("ALTER TABLE 'USER' ADD 'LOGIN_IS' INTEGER DEFAULT 0");
                    break;
                case 11:
                    db.execSQL("ALTER TABLE 'SURVEY_FORM' ADD 'FORM_STATUS' INTEGER");
                    break;
                case 12:
                    AttachFileDao.createTable(db, false);
                    break;
                case 13:
                    db.execSQL("ALTER TABLE 'FORM' ADD 'INPUT_VALUES_DEFAULT' TEXT");
                    db.execSQL("ALTER TABLE 'FORM_ITEM_ANSWER' ADD 'INPUT_VALUES_DEFAULT' TEXT");
                    db.execSQL("ALTER TABLE 'FORM_ITEM_ANSWER' ADD 'FORM_QUESTION_GROUP_ID' INTEGER");
                    db.execSQL("ALTER TABLE 'FORM_QUESTION' ADD 'INPUT_VALUES_DEFAULT' TEXT");
                    db.execSQL("ALTER TABLE 'FORM_QUESTION' ADD 'FORM_QUESTION_GROUP_ID' INTEGER");
                    db.execSQL("ALTER TABLE 'SURVEY_FORM_QUESTION' ADD 'FORM_QUESTION_GROUP_ID' INTEGER");
                    db.execSQL("ALTER TABLE 'SURVEY_FORM_QUESTION' ADD 'INPUT_VALUES_DEFAULT' INTEGER");
                    db.execSQL("ALTER TABLE 'SURVEY_FORM' ADD 'INPUT_VALUES_DEFAULT' INTEGER");
                    FormQuestionGroupDao.createTable(db, false);
                    FormQuestionGroupFormDao.createTable(db, false);
                    FormTempDao.createTable(db, false);
                    SurveyFormQuestionTempDao.createTable(db, false);
                    break;
            }
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(DeviceSettingDao.class);
        registerDaoClass(UserDao.class);
        registerDaoClass(UserPermissionDao.class);
        registerDaoClass(AppUserDao.class);
        registerDaoClass(ChatGroupDao.class);
        registerDaoClass(ChatGroupMemberDao.class);
        registerDaoClass(ChatMessageDao.class);
        registerDaoClass(ComplaintReportDao.class);
        registerDaoClass(SurveyFormDao.class);
        registerDaoClass(SurveyFormQuestionDao.class);
        registerDaoClass(FormAnswerDao.class);
        registerDaoClass(FormDao.class);
        registerDaoClass(FormItemAnswerDao.class);
        registerDaoClass(FormQuestionDao.class);
        registerDaoClass(AttachFileDao.class);
        registerDaoClass(FormQuestionGroupDao.class);
        registerDaoClass(FormTempDao.class);
        registerDaoClass(FormQuestionGroupFormDao.class);
        registerDaoClass(SurveyFormQuestionTempDao.class);
    }

    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }

    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }

}
