package com.gap.bis_inspection.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import com.gap.bis_inspection.db.objectmodel.User;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ServerUserId = new Property(1, Long.class, "serverUserId", false, "SERVER_USER_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Family = new Property(3, String.class, "family", false, "FAMILY");
        public final static Property MobileNo = new Property(4, String.class, "mobileNo", false, "MOBILE_NO");
        public final static Property Username = new Property(5, String.class, "username", false, "USERNAME");
        public final static Property Password = new Property(6, String.class, "password", false, "PASSWORD");
        public final static Property BisPassword = new Property(7, String.class, "bisPassword", false, "BIS_PASSWORD");
        public final static Property ExpireDate = new Property(8, java.util.Date.class, "expireDate", false, "EXPIRE_DATE");
        public final static Property LoginStatus = new Property(9, Integer.class, "loginStatus", false, "LOGIN_STATUS");
        public final static Property LastLoginDate = new Property(10, java.util.Date.class, "lastLoginDate", false, "LAST_LOGIN_DATE");
        public final static Property CompanyName = new Property(11, String.class, "companyName", false, "COMPANY_NAME");
        public final static Property PicturePathUrl = new Property(12, String.class, "picturePathUrl", false, "PICTURE_PATH_URL");
        public final static Property AutoLogin = new Property(13, Boolean.class, "autoLogin", false, "AUTO_LOGIN");
        public final static Property LoginIs = new Property(14, Boolean.class, "loginIs", false, "LOGIN_IS");
    };

    private DaoSession daoSession;

    public UserDao(DaoConfig config) {
        super(config);
    }

    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SERVER_USER_ID\" INTEGER," + // 1: serverUserId
                "\"NAME\" TEXT," + // 2: name
                "\"FAMILY\" TEXT," + // 3: family
                "\"MOBILE_NO\" TEXT UNIQUE ," + // 4: mobileNo
                "\"USERNAME\" TEXT UNIQUE ," + // 5: username
                "\"PASSWORD\" TEXT," + // 6: password
                "\"BIS_PASSWORD\" TEXT," + // 7: bisPassword
                "\"EXPIRE_DATE\" INTEGER," + // 8: expireDate
                "\"LOGIN_STATUS\" INTEGER," + // 9: loginStatus
                "\"LAST_LOGIN_DATE\" INTEGER," + // 10: lastLoginDate
                "\"COMPANY_NAME\" TEXT," + // 11: companyName
                "\"PICTURE_PATH_URL\" TEXT," + // 12: picturePathUrl
                "\"AUTO_LOGIN\" INTEGER," + // 13: autoLogin
                "\"LOGIN_IS\" INTEGER);"); // 14: loginIs
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Long serverUserId = entity.getServerUserId();
        if (serverUserId != null) {
            stmt.bindLong(2, serverUserId);
        }

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }

        String family = entity.getFamily();
        if (family != null) {
            stmt.bindString(4, family);
        }

        String mobileNo = entity.getMobileNo();
        if (mobileNo != null) {
            stmt.bindString(5, mobileNo);
        }

        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(6, username);
        }

        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(7, password);
        }

        String bisPassword = entity.getBisPassword();
        if (bisPassword != null) {
            stmt.bindString(8, bisPassword);
        }

        java.util.Date expireDate = entity.getExpireDate();
        if (expireDate != null) {
            stmt.bindLong(9, expireDate.getTime());
        }

        Integer loginStatus = entity.getLoginStatus();
        if (loginStatus != null) {
            stmt.bindLong(10, loginStatus);
        }

        java.util.Date lastLoginDate = entity.getLastLoginDate();
        if (lastLoginDate != null) {
            stmt.bindLong(11, lastLoginDate.getTime());
        }

        String companyName = entity.getCompanyName();
        if (companyName != null) {
            stmt.bindString(12, companyName);
        }

        String picturePathUrl = entity.getPicturePathUrl();
        if (picturePathUrl != null) {
            stmt.bindString(13, picturePathUrl);
        }

        Boolean autoLogin = entity.getAutoLogin();
        if (autoLogin != null) {
            stmt.bindLong(14, autoLogin ? 1L: 0L);
        }

        Boolean loginIs = entity.getLoginIs();
        if (loginIs != null) {
            stmt.bindLong(15, loginIs ? 1L: 0L);
        }
    }

    @Override
    protected void attachEntity(User entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // serverUserId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // family
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mobileNo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // username
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // password
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // bisPassword
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // expireDate
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // loginStatus
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // lastLoginDate
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // companyName
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // picturePathUrl
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0, // autoLogin
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0 // loginIs
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setServerUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFamily(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMobileNo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUsername(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPassword(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBisPassword(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setExpireDate(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setLoginStatus(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setLastLoginDate(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setCompanyName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPicturePathUrl(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAutoLogin(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0);
        entity.setLoginIs(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0);
     }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
