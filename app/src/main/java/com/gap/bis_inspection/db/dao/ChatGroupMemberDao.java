package com.gap.bis_inspection.db.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.gap.bis_inspection.db.objectmodel.ChatGroupMember;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_GROUP_MEMBER".
*/
public class ChatGroupMemberDao extends AbstractDao<ChatGroupMember, Long> {

    public static final String TABLENAME = "CHAT_GROUP_MEMBER";

    /**
     * Properties of entity ChatGroupMember.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PrivilegeTypeEn = new Property(1, Integer.class, "privilegeTypeEn", false, "PRIVILEGE_TYPE_EN");
        public final static Property AdminIs = new Property(2, Boolean.class, "adminIs", false, "ADMIN_IS");
        public final static Property AppUserId = new Property(3, long.class, "appUserId", false, "APP_USER_ID");
        public final static Property ChatGroupId = new Property(4, long.class, "chatGroupId", false, "CHAT_GROUP_ID");
    }

    private Query<ChatGroupMember> appUser_ChatGroupListQuery;
    private Query<ChatGroupMember> chatGroup_ChatGroupMemberListQuery;

    public ChatGroupMemberDao(DaoConfig config) {
        super(config);
    }
    
    public ChatGroupMemberDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_GROUP_MEMBER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PRIVILEGE_TYPE_EN\" INTEGER," + // 1: privilegeTypeEn
                "\"ADMIN_IS\" INTEGER," + // 2: adminIs
                "\"APP_USER_ID\" INTEGER NOT NULL ," + // 3: appUserId
                "\"CHAT_GROUP_ID\" INTEGER NOT NULL );"); // 4: chatGroupId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_GROUP_MEMBER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChatGroupMember entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer privilegeTypeEn = entity.getPrivilegeTypeEn();
        if (privilegeTypeEn != null) {
            stmt.bindLong(2, privilegeTypeEn);
        }
 
        Boolean adminIs = entity.getAdminIs();
        if (adminIs != null) {
            stmt.bindLong(3, adminIs ? 1L: 0L);
        }
        stmt.bindLong(4, entity.getAppUserId());
        stmt.bindLong(5, entity.getChatGroupId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ChatGroupMember readEntity(Cursor cursor, int offset) {
        ChatGroupMember entity = new ChatGroupMember( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // privilegeTypeEn
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // adminIs
            cursor.getLong(offset + 3), // appUserId
            cursor.getLong(offset + 4) // chatGroupId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ChatGroupMember entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPrivilegeTypeEn(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setAdminIs(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setAppUserId(cursor.getLong(offset + 3));
        entity.setChatGroupId(cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ChatGroupMember entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ChatGroupMember entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "chatGroupList" to-many relationship of AppUser. */
    public List<ChatGroupMember> _queryAppUser_ChatGroupList(long appUserId) {
        synchronized (this) {
            if (appUser_ChatGroupListQuery == null) {
                QueryBuilder<ChatGroupMember> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.AppUserId.eq(null));
                appUser_ChatGroupListQuery = queryBuilder.build();
            }
        }
        Query<ChatGroupMember> query = appUser_ChatGroupListQuery.forCurrentThread();
        query.setParameter(0, appUserId);
        return query.list();
    }

    /** Internal query to resolve the "chatGroupMemberList" to-many relationship of ChatGroup. */
    public List<ChatGroupMember> _queryChatGroup_ChatGroupMemberList(long chatGroupId) {
        synchronized (this) {
            if (chatGroup_ChatGroupMemberListQuery == null) {
                QueryBuilder<ChatGroupMember> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ChatGroupId.eq(null));
                chatGroup_ChatGroupMemberListQuery = queryBuilder.build();
            }
        }
        Query<ChatGroupMember> query = chatGroup_ChatGroupMemberListQuery.forCurrentThread();
        query.setParameter(0, chatGroupId);
        return query.list();
    }

}
