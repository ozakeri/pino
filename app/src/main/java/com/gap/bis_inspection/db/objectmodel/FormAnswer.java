package com.gap.bis_inspection.db.objectmodel;

import com.gap.bis_inspection.db.dao.DaoSession;
import com.gap.bis_inspection.db.dao.FormAnswerDao;
import com.gap.bis_inspection.db.dao.FormItemAnswerDao;
import com.gap.bis_inspection.db.dao.FormTempDao;

import java.util.List;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "FORM_ANSWER".
 */
public class FormAnswer {

    private Long id;
    private String name;
    private Long carId;
    private Long lineId;
    private Integer minScore;
    private Integer maxScore;
    private java.util.Date startDate;
    private java.util.Date endDate;
    private Integer statusEn;
    private Integer formStatus;
    private java.util.Date statusDate;
    private Integer sendingStatusEn;
    private java.util.Date sendingStatusDate;
    private String xLatitude;
    private String yLongitude;
    private Long serverAnswerInfoId;
    private Long formId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient FormAnswerDao myDao;

    private List<FormItemAnswer> formItemAnswerListFormAnswer;
    private List<FormTemp> formItemAnswerListFormTemp;

    public FormAnswer() {
    }

    public FormAnswer(Long id) {
        this.id = id;
    }

    public FormAnswer(Long id, String name, Long carId, Long lineId, Integer minScore, Integer maxScore, java.util.Date startDate, java.util.Date endDate, Integer statusEn, Integer formStatus, java.util.Date statusDate, Integer sendingStatusEn, java.util.Date sendingStatusDate, String xLatitude, String yLongitude, Long serverAnswerInfoId, Long formId) {
        this.id = id;
        this.name = name;
        this.carId = carId;
        this.lineId = lineId;
        this.minScore = minScore;
        this.maxScore = maxScore;
        this.startDate = startDate;
        this.endDate = endDate;
        this.statusEn = statusEn;
        this.formStatus = formStatus;
        this.statusDate = statusDate;
        this.sendingStatusEn = sendingStatusEn;
        this.sendingStatusDate = sendingStatusDate;
        this.xLatitude = xLatitude;
        this.yLongitude = yLongitude;
        this.serverAnswerInfoId = serverAnswerInfoId;
        this.formId = formId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getFormAnswerDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Long getCarId() {
        return carId;
    }

    public void setCarId(Long carId) {
        this.carId = carId;
    }

    public Long getLineId() {
        return lineId;
    }

    public void setLineId(Long lineId) {
        this.lineId = lineId;
    }

    public Integer getMinScore() {
        return minScore;
    }

    public void setMinScore(Integer minScore) {
        this.minScore = minScore;
    }

    public Integer getMaxScore() {
        return maxScore;
    }

    public void setMaxScore(Integer maxScore) {
        this.maxScore = maxScore;
    }

    public java.util.Date getStartDate() {
        return startDate;
    }

    public void setStartDate(java.util.Date startDate) {
        this.startDate = startDate;
    }

    public java.util.Date getEndDate() {
        return endDate;
    }

    public void setEndDate(java.util.Date endDate) {
        this.endDate = endDate;
    }

    public Integer getStatusEn() {
        return statusEn;
    }

    public void setStatusEn(Integer statusEn) {
        this.statusEn = statusEn;
    }

    public Integer getFormStatus() {
        return formStatus;
    }

    public void setFormStatus(Integer formStatus) {
        this.formStatus = formStatus;
    }

    public java.util.Date getStatusDate() {
        return statusDate;
    }

    public void setStatusDate(java.util.Date statusDate) {
        this.statusDate = statusDate;
    }

    public Integer getSendingStatusEn() {
        return sendingStatusEn;
    }

    public void setSendingStatusEn(Integer sendingStatusEn) {
        this.sendingStatusEn = sendingStatusEn;
    }

    public java.util.Date getSendingStatusDate() {
        return sendingStatusDate;
    }

    public void setSendingStatusDate(java.util.Date sendingStatusDate) {
        this.sendingStatusDate = sendingStatusDate;
    }

    public String getXLatitude() {
        return xLatitude;
    }

    public void setXLatitude(String xLatitude) {
        this.xLatitude = xLatitude;
    }

    public String getYLongitude() {
        return yLongitude;
    }

    public void setYLongitude(String yLongitude) {
        this.yLongitude = yLongitude;
    }

    public Long getServerAnswerInfoId() {
        return serverAnswerInfoId;
    }

    public void setServerAnswerInfoId(Long serverAnswerInfoId) {
        this.serverAnswerInfoId = serverAnswerInfoId;
    }

    public Long getFormId() {
        return formId;
    }

    public void setFormId(Long formId) {
        this.formId = formId;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<FormItemAnswer> getFormItemAnswerListFormAnswer() {
        if (formItemAnswerListFormAnswer == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FormItemAnswerDao targetDao = daoSession.getFormItemAnswerDao();
            List<FormItemAnswer> formItemAnswerListFormAnswerNew = targetDao._queryFormAnswer_FormItemAnswerListFormAnswer(id);
            synchronized (this) {
                if(formItemAnswerListFormAnswer == null) {
                    formItemAnswerListFormAnswer = formItemAnswerListFormAnswerNew;
                }
            }
        }
        return formItemAnswerListFormAnswer;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetFormItemAnswerListFormAnswer() {
        formItemAnswerListFormAnswer = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<FormTemp> getFormItemAnswerListFormTemp() {
        if (formItemAnswerListFormTemp == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FormTempDao targetDao = daoSession.getFormTempDao();
            List<FormTemp> formItemAnswerListFormTempNew = targetDao._queryFormAnswer_FormItemAnswerListFormTemp(id);
            synchronized (this) {
                if(formItemAnswerListFormTemp == null) {
                    formItemAnswerListFormTemp = formItemAnswerListFormTempNew;
                }
            }
        }
        return formItemAnswerListFormTemp;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetFormItemAnswerListFormTemp() {
        formItemAnswerListFormTemp = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
