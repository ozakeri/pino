package com.gap.bis_inspection.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.gap.bis_inspection.db.objectmodel.UserPermission;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_PERMISSION".
*/
public class UserPermissionDao extends AbstractDao<UserPermission, Long> {

    public static final String TABLENAME = "USER_PERMISSION";

    /**
     * Properties of entity UserPermission.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PermissionName = new Property(1, String.class, "permissionName", false, "PERMISSION_NAME");
        public final static Property UserId = new Property(2, long.class, "userId", false, "USER_ID");
    }

    private Query<UserPermission> user_UserPermissionListQuery;

    public UserPermissionDao(DaoConfig config) {
        super(config);
    }
    
    public UserPermissionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_PERMISSION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PERMISSION_NAME\" TEXT," + // 1: permissionName
                "\"USER_ID\" INTEGER NOT NULL );"); // 2: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_PERMISSION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserPermission entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String permissionName = entity.getPermissionName();
        if (permissionName != null) {
            stmt.bindString(2, permissionName);
        }
        stmt.bindLong(3, entity.getUserId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserPermission readEntity(Cursor cursor, int offset) {
        UserPermission entity = new UserPermission( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // permissionName
            cursor.getLong(offset + 2) // userId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserPermission entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPermissionName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserId(cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserPermission entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserPermission entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "userPermissionList" to-many relationship of User. */
    public List<UserPermission> _queryUser_UserPermissionList(long userId) {
        synchronized (this) {
            if (user_UserPermissionListQuery == null) {
                QueryBuilder<UserPermission> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                user_UserPermissionListQuery = queryBuilder.build();
            }
        }
        Query<UserPermission> query = user_UserPermissionListQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

}
