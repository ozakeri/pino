package com.gap.bis_inspection.db.objectmodel;

import com.gap.bis_inspection.db.dao.DaoSession;
import com.gap.bis_inspection.db.dao.FormItemAnswerDao;
import com.gap.bis_inspection.db.dao.FormQuestionDao;
import com.gap.bis_inspection.db.dao.FormTempDao;

import java.util.List;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "FORM_QUESTION".
 */
public class FormQuestion {

    private Long id;
    private String question;
    private Integer answerTypeEn;
    private Integer answerInt;
    private String answerStr;
    private Long serverAnswerId;
    private String inputValuesDefault;
    private Long formId;
    private long formQuestionGroupId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient FormQuestionDao myDao;

    private List<FormItemAnswer> formAnswerListFormQuestion;
    private List<FormTemp> formTempListFormQuestion;

    public FormQuestion() {
    }

    public FormQuestion(Long id) {
        this.id = id;
    }

    public FormQuestion(Long id, String question, Integer answerTypeEn, Integer answerInt, String answerStr, Long serverAnswerId, String inputValuesDefault, Long formId, long formQuestionGroupId) {
        this.id = id;
        this.question = question;
        this.answerTypeEn = answerTypeEn;
        this.answerInt = answerInt;
        this.answerStr = answerStr;
        this.serverAnswerId = serverAnswerId;
        this.inputValuesDefault = inputValuesDefault;
        this.formId = formId;
        this.formQuestionGroupId = formQuestionGroupId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getFormQuestionDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getQuestion() {
        return question;
    }

    public void setQuestion(String question) {
        this.question = question;
    }

    public Integer getAnswerTypeEn() {
        return answerTypeEn;
    }

    public void setAnswerTypeEn(Integer answerTypeEn) {
        this.answerTypeEn = answerTypeEn;
    }

    public Integer getAnswerInt() {
        return answerInt;
    }

    public void setAnswerInt(Integer answerInt) {
        this.answerInt = answerInt;
    }

    public String getAnswerStr() {
        return answerStr;
    }

    public void setAnswerStr(String answerStr) {
        this.answerStr = answerStr;
    }

    public Long getServerAnswerId() {
        return serverAnswerId;
    }

    public void setServerAnswerId(Long serverAnswerId) {
        this.serverAnswerId = serverAnswerId;
    }

    public String getInputValuesDefault() {
        return inputValuesDefault;
    }

    public void setInputValuesDefault(String inputValuesDefault) {
        this.inputValuesDefault = inputValuesDefault;
    }

    public Long getFormId() {
        return formId;
    }

    public void setFormId(Long formId) {
        this.formId = formId;
    }

    public long getFormQuestionGroupId() {
        return formQuestionGroupId;
    }

    public void setFormQuestionGroupId(long formQuestionGroupId) {
        this.formQuestionGroupId = formQuestionGroupId;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<FormItemAnswer> getFormAnswerListFormQuestion() {
        if (formAnswerListFormQuestion == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FormItemAnswerDao targetDao = daoSession.getFormItemAnswerDao();
            List<FormItemAnswer> formAnswerListFormQuestionNew = targetDao._queryFormQuestion_FormAnswerListFormQuestion(id);
            synchronized (this) {
                if(formAnswerListFormQuestion == null) {
                    formAnswerListFormQuestion = formAnswerListFormQuestionNew;
                }
            }
        }
        return formAnswerListFormQuestion;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetFormAnswerListFormQuestion() {
        formAnswerListFormQuestion = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<FormTemp> getFormTempListFormQuestion() {
        if (formTempListFormQuestion == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FormTempDao targetDao = daoSession.getFormTempDao();
            List<FormTemp> formTempListFormQuestionNew = targetDao._queryFormQuestion_FormTempListFormQuestion(id);
            synchronized (this) {
                if(formTempListFormQuestion == null) {
                    formTempListFormQuestion = formTempListFormQuestionNew;
                }
            }
        }
        return formTempListFormQuestion;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetFormTempListFormQuestion() {
        formTempListFormQuestion = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
