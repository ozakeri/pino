package com.gap.bis_inspection.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.gap.bis_inspection.db.objectmodel.ComplaintReport;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMPLAINT_REPORT".
*/
public class ComplaintReportDao extends AbstractDao<ComplaintReport, Long> {

    public static final String TABLENAME = "COMPLAINT_REPORT";

    /**
     * Properties of entity ComplaintReport.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Identifier = new Property(1, String.class, "identifier", false, "IDENTIFIER");
        public final static Property EntityId = new Property(2, Long.class, "entityId", false, "ENTITY_ID");
        public final static Property EntityNameEn = new Property(3, Integer.class, "entityNameEn", false, "ENTITY_NAME_EN");
        public final static Property DisplayName = new Property(4, String.class, "displayName", false, "DISPLAY_NAME");
        public final static Property ReportCode = new Property(5, String.class, "reportCode", false, "REPORT_CODE");
        public final static Property ReportStr = new Property(6, String.class, "reportStr", false, "REPORT_STR");
        public final static Property UserReportId = new Property(7, Long.class, "userReportId", false, "USER_REPORT_ID");
        public final static Property ReportDate = new Property(8, java.util.Date.class, "reportDate", false, "REPORT_DATE");
        public final static Property ServerId = new Property(9, Long.class, "serverId", false, "SERVER_ID");
        public final static Property DeliverIs = new Property(10, Boolean.class, "deliverIs", false, "DELIVER_IS");
        public final static Property DeliverDate = new Property(11, java.util.Date.class, "deliverDate", false, "DELIVER_DATE");
        public final static Property SendingStatusEn = new Property(12, Integer.class, "sendingStatusEn", false, "SENDING_STATUS_EN");
        public final static Property SendingStatusDate = new Property(13, java.util.Date.class, "sendingStatusDate", false, "SENDING_STATUS_DATE");
        public final static Property XLatitude = new Property(14, String.class, "xLatitude", false, "X_LATITUDE");
        public final static Property YLongitude = new Property(15, String.class, "yLongitude", false, "Y_LONGITUDE");
    }


    public ComplaintReportDao(DaoConfig config) {
        super(config);
    }

    public ComplaintReportDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMPLAINT_REPORT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"IDENTIFIER\" TEXT," + // 1: identifier
                "\"ENTITY_ID\" INTEGER," + // 2: entityId
                "\"ENTITY_NAME_EN\" INTEGER," + // 3: entityNameEn
                "\"DISPLAY_NAME\" TEXT," + // 4: displayName
                "\"REPORT_CODE\" TEXT," + // 5: reportCode
                "\"REPORT_STR\" TEXT," + // 6: reportStr
                "\"USER_REPORT_ID\" INTEGER," + // 7: userReportId
                "\"REPORT_DATE\" INTEGER," + // 8: reportDate
                "\"SERVER_ID\" INTEGER," + // 9: serverId
                "\"DELIVER_IS\" INTEGER," + // 10: deliverIs
                "\"DELIVER_DATE\" INTEGER," + // 11: deliverDate
                "\"SENDING_STATUS_EN\" INTEGER," + // 12: sendingStatusEn
                "\"SENDING_STATUS_DATE\" INTEGER," + // 13: sendingStatusDate
                "\"X_LATITUDE\" TEXT," + // 14: xLatitude
                "\"Y_LONGITUDE\" TEXT);"); // 15: yLongitude
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMPLAINT_REPORT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ComplaintReport entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String identifier = entity.getIdentifier();
        if (identifier != null) {
            stmt.bindString(2, identifier);
        }

        Long entityId = entity.getEntityId();
        if (entityId != null) {
            stmt.bindLong(3, entityId);
        }

        Integer entityNameEn = entity.getEntityNameEn();
        if (entityNameEn != null) {
            stmt.bindLong(4, entityNameEn);
        }

        String displayName = entity.getDisplayName();
        if (displayName != null) {
            stmt.bindString(5, displayName);
        }

        String reportCode = entity.getReportCode();
        if (reportCode != null) {
            stmt.bindString(6, reportCode);
        }

        String reportStr = entity.getReportStr();
        if (reportStr != null) {
            stmt.bindString(7, reportStr);
        }

        Long userReportId = entity.getUserReportId();
        if (userReportId != null) {
            stmt.bindLong(8, userReportId);
        }

        java.util.Date reportDate = entity.getReportDate();
        if (reportDate != null) {
            stmt.bindLong(9, reportDate.getTime());
        }

        Long serverId = entity.getServerId();
        if (serverId != null) {
            stmt.bindLong(10, serverId);
        }

        Boolean deliverIs = entity.getDeliverIs();
        if (deliverIs != null) {
            stmt.bindLong(11, deliverIs ? 1L: 0L);
        }

        java.util.Date deliverDate = entity.getDeliverDate();
        if (deliverDate != null) {
            stmt.bindLong(12, deliverDate.getTime());
        }

        Integer sendingStatusEn = entity.getSendingStatusEn();
        if (sendingStatusEn != null) {
            stmt.bindLong(13, sendingStatusEn);
        }

        java.util.Date sendingStatusDate = entity.getSendingStatusDate();
        if (sendingStatusDate != null) {
            stmt.bindLong(14, sendingStatusDate.getTime());
        }

        String xLatitude = entity.getXLatitude();
        if (xLatitude != null) {
            stmt.bindString(15, xLatitude);
        }

        String yLongitude = entity.getYLongitude();
        if (yLongitude != null) {
            stmt.bindString(16, yLongitude);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public ComplaintReport readEntity(Cursor cursor, int offset) {
        ComplaintReport entity = new ComplaintReport( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // identifier
                cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // entityId
                cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // entityNameEn
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // displayName
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // reportCode
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // reportStr
                cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // userReportId
                cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // reportDate
                cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // serverId
                cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // deliverIs
                cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // deliverDate
                cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // sendingStatusEn
                cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)), // sendingStatusDate
                cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // xLatitude
                cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // yLongitude
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ComplaintReport entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdentifier(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEntityId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setEntityNameEn(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setDisplayName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setReportCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setReportStr(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUserReportId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setReportDate(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setServerId(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setDeliverIs(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setDeliverDate(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setSendingStatusEn(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setSendingStatusDate(cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)));
        entity.setXLatitude(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setYLongitude(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ComplaintReport entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(ComplaintReport entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
}
