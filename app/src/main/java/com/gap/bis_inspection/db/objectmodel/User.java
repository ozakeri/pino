package com.gap.bis_inspection.db.objectmodel;

import com.gap.bis_inspection.db.dao.DaoSession;
import com.gap.bis_inspection.db.dao.UserDao;
import com.gap.bis_inspection.db.dao.UserPermissionDao;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table "USER".
 */
public class User {

    private Long id;
    private Long serverUserId;
    private String name;
    private String family;
    private String mobileNo;
    private String username;
    private String password;
    private String bisPassword;
    private java.util.Date expireDate;
    private Integer loginStatus;
    private java.util.Date lastLoginDate;
    private String companyName;
    private String picturePathUrl;
    private Boolean autoLogin;
    private Boolean loginIs;

    /**
     * Used to resolve relations
     */
    private transient DaoSession daoSession;

    /**
     * Used for active entity operations.
     */
    private transient UserDao myDao;

    private List<UserPermission> userPermissionList;

    public User() {
    }

    public User(Long id) {
        this.id = id;
    }

    public User(Long id, Long serverUserId, String name, String family, String mobileNo, String username, String password, String bisPassword, java.util.Date expireDate, Integer loginStatus, java.util.Date lastLoginDate, String companyName, String picturePathUrl, Boolean autoLogin, Boolean loginIs) {
        this.id = id;
        this.serverUserId = serverUserId;
        this.name = name;
        this.family = family;
        this.mobileNo = mobileNo;
        this.username = username;
        this.password = password;
        this.bisPassword = bisPassword;
        this.expireDate = expireDate;
        this.loginStatus = loginStatus;
        this.lastLoginDate = lastLoginDate;
        this.companyName = companyName;
        this.picturePathUrl = picturePathUrl;
        this.autoLogin = autoLogin;
        this.loginIs = loginIs;
    }

    /**
     * called by internal mechanisms, do not call yourself.
     */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserDao() :
                null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getServerUserId() {
        return serverUserId;
    }

    public void setServerUserId(Long serverUserId) {
        this.serverUserId = serverUserId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getFamily() {
        return family;
    }

    public void setFamily(String family) {
        this.family = family;
    }

    public String getMobileNo() {
        return mobileNo;
    }

    public void setMobileNo(String mobileNo) {
        this.mobileNo = mobileNo;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getBisPassword() {
        return bisPassword;
    }

    public void setBisPassword(String bisPassword) {
        this.bisPassword = bisPassword;
    }

    public java.util.Date getExpireDate() {
        return expireDate;
    }

    public void setExpireDate(java.util.Date expireDate) {
        this.expireDate = expireDate;
    }

    public Integer getLoginStatus() {
        return loginStatus;
    }

    public void setLoginStatus(Integer loginStatus) {
        this.loginStatus = loginStatus;
    }

    public java.util.Date getLastLoginDate() {
        return lastLoginDate;
    }

    public void setLastLoginDate(java.util.Date lastLoginDate) {
        this.lastLoginDate = lastLoginDate;
    }

    public String getCompanyName() {
        return companyName;
    }

    public void setCompanyName(String companyName) {
        this.companyName = companyName;
    }

    public String getPicturePathUrl() {
        return picturePathUrl;
    }

    public void setPicturePathUrl(String picturePathUrl) {
        this.picturePathUrl = picturePathUrl;
    }

    public Boolean getAutoLogin() {
        return autoLogin;
    }

    public void setAutoLogin(Boolean autoLogin) {
        this.autoLogin = autoLogin;
    }

    public Boolean getLoginIs() {
        return loginIs;
    }

    public void setLoginIs(Boolean loginIs) {
        this.loginIs = loginIs;
    }

    /**
     * To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity.
     */
    public List<UserPermission> getUserPermissionList() {
        if (userPermissionList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserPermissionDao targetDao = daoSession.getUserPermissionDao();
            List<UserPermission> userPermissionListNew = targetDao._queryUser_UserPermissionList(id);
            synchronized (this) {
                if (userPermissionList == null) {
                    userPermissionList = userPermissionListNew;
                }
            }
        }
        return userPermissionList;
    }

    /**
     * Resets a to-many relationship, making the next get call to query for a fresh result.
     */
    public synchronized void resetUserPermissionList() {
        userPermissionList = null;
    }

    /**
     * Convenient call for {@link de.greenrobot.dao.AbstractDao#delete(Object)}. Entity must attached to an entity context.
     */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link de.greenrobot.dao.AbstractDao#update(Object)}. Entity must attached to an entity context.
     */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link de.greenrobot.dao.AbstractDao#refresh(Object)}. Entity must attached to an entity context.
     */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

}
